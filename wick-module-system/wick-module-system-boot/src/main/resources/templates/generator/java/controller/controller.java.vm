package ${packageName}.controller;

import com.wick.boot.common.core.result.PageResult;
import com.wick.boot.common.core.result.ResultUtil;
import ${packageName}.service.${className}Service;
import ${packageName}.model.dto.${businessName}.${className}DTO;
import ${packageName}.model.vo.${businessName}.Add${className}ReqVO;
import ${packageName}.model.vo.${businessName}.Update${className}ReqVO;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.validation.Valid;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import java.util.List;

/**
 * $!{functionName}管理-控制类
 *
 * @author ${author}
 * @date ${date}
 */
@RestController
@RequestMapping("/${moduleName}/${businessName}")
@Api(tags = "${functionName}")
public class ${className}Controller {

    @Resource
    private ${className}Service ${lowerClassName}Service;

    @PostMapping("/add")
    @PreAuthorize("@ss.hasPerm('${permissionPrefix}:add')")
    @ApiOperation(value = "新增${functionName}数据", notes = "${functionName}管理")
    public ResultUtil<Long> add(@Valid @RequestBody ${className}AddReqVO reqVO) {
        this.${lowerClassName}Service.add${className}(reqVO);
        return ResultUtil.success();
    }

    @PutMapping("/update")
    @PreAuthorize("@ss.hasPerm('${permissionPrefix}:update')")
    @ApiOperation(value = "修改${functionName}数据", notes = "${functionName}管理")
    public ResultUtil<Boolean> update(@Valid @RequestBody ${className}UpdateReqVO reqVO) {
        this.${lowerClassName}Service.update${className}(reqVO);
        return ResultUtil.success(true);
    }

    @DeleteMapping("/delete/{ids}")
    @PreAuthorize("@ss.hasPerm('${permissionPrefix}:delete')")
    @ApiOperation(value = "删除${functionName}数据", notes = "${functionName}管理")
    @ApiImplicitParam(name = "ids", value = "主键id", required = true, dataType = "Long", dataTypeClass = Long.class)
    public ResultUtil<Long> remove(@PathVariable("ids") List<Long> ids) {
        this.${lowerClassName}Service.delete${className}(ids);
        return ResultUtil.success();
    }

    @GetMapping("/{id}")
    @PreAuthorize("@ss.hasPerm('${permissionPrefix}:query')")
    @ApiOperation(value = "通过主键获取${functionName}数据", notes = "${functionName}管理")
    @ApiImplicitParam(name = "id", value = "${functionName}ID", required = true, dataType = "Long", dataTypeClass = Long.class)
    public ResultUtil<${className}DTO> get${className}(@NotNull(message = "主键不能为空") @PathVariable Long id) {
        return ResultUtil.success(${lowerClassName}Service.get${className}(id));
    }

    @GetMapping("/page")
    @PreAuthorize("@ss.hasPerm('${permissionPrefix}:query')")
    @ApiOperation(value = "获取${functionName}分页数据", notes = "${functionName}管理")
    public ResultUtil<PageResult<${className}DTO>> get${className}Page(@Valid ${className}QueryVO reqVO) {
        return ResultUtil.success(${lowerClassName}Service.get${className}Page(reqVO));
    }

}