package ${packageName}.service.impl;

import cn.hutool.core.util.ObjUtil;
import com.wick.boot.common.core.result.PageResult;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${packageName}.convert.${className}Convert;
import ${packageName}.mapper.${className}Mapper;
import ${packageName}.model.vo.${packageVOName}.${className}AddVO;
import ${packageName}.model.vo.${packageVOName}.${className}UpdateVO;
import ${packageName}.model.vo.${packageVOName}.${className}QueryVO;
import ${packageName}.model.dto.${packageVOName}.${className}DTO;
import ${packageName}.model.entity.${className};
import ${packageName}.service.${className}AbstractService;
import ${packageName}.service.${className}Service;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.List;

/**
 * $!{functionName}管理-服务实现类
 *
 * @author ${author}
 * @date ${date}
 */
@Slf4j
@Service
public class ${className}ServiceImpl extends ${className}AbstractService implements ${className}Service {

    @Resource
    private ${className}Mapper ${lowerClassName}Mapper;

    /**
     * 新增${functionName}数据
     *
     * @param reqVO 新增请求参数
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Long add${className}(${className}AddVO reqVO) {
        /* Step-1: 校验新增参数 */
        this.validateAddParams(reqVO);

        /* Step-2: 转换实体类型 */
        ${className} ${lowerClassName} = ${className}Convert.INSTANCE.addVoToEntity(reqVO);

        /* Step-3: 保存${functionName}信息 */
        this.${lowerClassName}Mapper.insert(${lowerClassName});
        return ${lowerClassName}.getId();
    }

    /**
     * 更新${functionName}数据
     *
     * @param reqVO 更新请求参数
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void update${className}(${className}UpdateVO reqVO) {
        /* Step-1: 校验更新参数 */
        this.validateUpdateParams(reqVO);

        /* Step-2: 转换实体类型 */
        ${className} ${lowerClassName} = ${className}Convert.INSTANCE.updateVoToEntity(reqVO);

        /* Step-3: 更新${functionName}信息 */
        this.${lowerClassName}Mapper.updateById(${lowerClassName});
    }

    /**
     * 删除${functionName}数据
     *
     * @param ids 主键集合
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void delete${className}(List<Long> ids) {
        /* Step-1: 校验删除参数 */
        List<${className}> ${lowerClassName}List = this.${lowerClassName}Mapper.selectBatchIds(ids);
        this.validateDeleteParams(${lowerClassName}List, ids);

        /* Step-2: 删除${functionName}信息 */
        this.${lowerClassName}Mapper.deleteBatchIds(${lowerClassName}List);
    }

    /**
     * 获取${functionName}数据
     *
     * @param id ${functionName}ID
     * @return ${className}DTO ${functionName}DTO
     */
    public ${className}DTO get${className}(Long id) {
        /* Step-1: 通过主键获取${functionName} */
        ${className} ${lowerClassName} = this.${lowerClassName}Mapper.selectById(id);

        /* Step-2: 转换实体类型 */
        return ${className}Convert.INSTANCE.entityToDTO(${lowerClassName});
    }

    /**
     * 获取${functionName}分页数据
     *
     * @param queryParams 分页查询参数
     * @return ${className}DTO ${functionName}DTO
     */
    public PageResult<${className}DTO> get${className}Page(${className}QueryVO queryParams) {
        Page<${className}> pageResult = this.${lowerClassName}Mapper.get${className}Page(
                new Page<>(queryParams.getPageNumber(), queryParams.getPageSize()),
                queryParams
        );

        if (ObjUtil.isNull(pageResult)) {
            return PageResult.empty();
        }

        List<${className}DTO> ${lowerClassName}Pages = ${className}Convert.INSTANCE.entityToPage(pageResult.getRecords());
        return new PageResult<>(${lowerClassName}Pages, pageResult.getTotal());
    }

}